#define F_CPU 16000000
#include <avr/io.h>
#include <util/delay.h>


#define BUAD 19200
#define BUAD_RATE_CALC ((F_CPU/(16*BUAD)) - 1)


//int main(void){
//
////High and low bits
//UBRR0H = (BUAD_RATE_CALC >> 8);
//UBRR0L = BUAD_RATE_CALC;
//////////////////
////transimit and recieve enable
//UCSR0B = (1 << TXEN0)| (1 << TXCIE0) | (1 << RXEN0) | (1 << RXCIE0);
//UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);  //8 bit data format
//////////////////////////////////////////////////////////////////
//int counter = 100;
//DDRC =0xff;
//DDRB =0xff;
//while (1){
//send_usart( counter);
//rcv_usart();
//counter--;
//_delay_ms(5000);
//if(counter == 0){
//return 0;
//}
//}
//}

//void send_usart( unsigned char data )
//{
//while (( UCSR0A & (1<<UDRE0))  == 0){};
//UDR0 = data;
//}
//
//void rcv_usart()
//{
//while (!(UCSR0A & (1<<RXC0)) ){};
//
//PORTC = UDR0;
//}

#include <avr/io.h>
#define PORT_ON(port,pin) port |= (1<<pin)
#define PORT_OFF(port,pin) port &= ~(1<<pin)
int main(void)
{
	unsigned int adc_value; // Variable to hold ADC result
	DDRB=0xff; // Set Port B as Output
	PORTB = 0x00;
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
	// ADEN: Set to turn on ADC , by default it is turned off
	//ADPS2: ADPS2 and ADPS0 set to make division factor 32
	ADMUX=(1<<REFS0); // ADC input channel set to PC5
	while (1)
	{
		ADCSRA |= (1<<ADSC); // Start conversion
		while (ADCSRA & (1<<ADSC)); // wait for conversion to complete
		adc_value = ADCW; //Store ADC value
		if (adc_value < 512)
		{
			PORT_OFF(PORTB,5); // Toggle LEDs
			PORT_ON (PORTB,4);
		}
		else if(adc_value > 512)
		{
			PORT_ON (PORTB,5); // Toggle LEDs
			PORT_OFF(PORTB,4);
			
		}
	}
}

